import unittest
from parameterized import parameterized
from SQLElementSharedLibrary.SQLAutogenerator import *

class AutogeneratorTest(unittest.TestCase):

    # autogenerate() Tests------------------------------------------------------------------------------------------------------------------
    # setup function
    @parameterized.expand([
            ["create","easy","create"]
            [""]
            ])
    def test_autogenerate(self,testType,difficulty,keyWord):
        initialAns = '\n    '
        data = {'params':{'html_params':{'questionType':testType,'difficulty':difficulty},
                          'db_initialize':""},
                'correct_answers':{'SQLEditor': initialAns}}
        
        self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
        autogenerate(data)
        
        self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
        actualQuestionType = ''.join(data['params']['questionString']).lower()
        self.assertIn(keyWord,actualQuestionType)

    # case1 : enter an invalid difficulty
    def testAutogenerateInvalidDifficultyReturnsNone(self):
        data = {'params':{'html_params':{'random':{},'questionType':{},'difficulty':{}}}}

        result = autogenerate(data)

        self.assertIsNone(result)
    
    # # case2 : valid type and difficulty = create , easy
    # def testAutogenerateCreateTypeEasy(self):
    #     testType = "create"
    #     initialAns = '\n    '
    #     data = {'params':{'html_params':{'questionType':testType,'difficulty':"easy"},
    #                       'db_initialize':""},
    #             'correct_answers':{'SQLEditor': initialAns}}
        
    #     self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
    #     autogenerate(data)
        
    #     self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
    #     actualQuestionType = data['params']['questionString'].split()[0].lower()
    #     self.assertEqual(actualQuestionType,testType)
    
    # # case3 : valid type and difficulty = insert , easy
    # def testAutogenerateInsertTypeEasy(self):
    #     testType = "insert"
    #     initialAns = '\n    '
    #     data = {'params':{'html_params':{'questionType':testType,'difficulty':"easy"},
    #                       'db_initialize':""},
    #             'correct_answers':{'SQLEditor': initialAns}}
        
    #     self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
    #     autogenerate(data)
        
    #     self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
    #     actualQuestionType = data['params']['questionString'].split()[0].lower()
    #     self.assertEqual(actualQuestionType,testType)

    # # case4 : valid type and difficulty = update , easy
    # def testAutogenerateUpdateTypeEasy(self):
    #     testType = "update"
    #     initialAns = '\n    '
    #     data = {'params':{'html_params':{'questionType':testType,'difficulty':"easy"},
    #                       'db_initialize':""},
    #             'correct_answers':{'SQLEditor': initialAns}}
        
    #     self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
    #     autogenerate(data)
        
    #     self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
    #     actualQuestionType = ''.join(data['params']['questionString'])
    #     self.assertIn("change",actualQuestionType)

    # # case5 : valid type and difficulty = delete , easy
    # def testAutogenerateDeleteTypeEasy(self):
    #     testType = "delete"
    #     initialAns = '\n    '
    #     data = {'params':{'html_params':{'questionType':testType,'difficulty':"easy"},
    #                       'db_initialize':""},
    #             'correct_answers':{'SQLEditor': initialAns}}
        
    #     self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
    #     autogenerate(data)
        
    #     self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
    #     actualQuestionType = ''.join(data['params']['questionString'])
    #     self.assertIn(testType,actualQuestionType)

    # # case6 : valid type and difficulty = query , easy
    # def testAutogenerateQueryTypeEasy(self):
    #     testType = "query"
    #     initialAns = '\n    '
    #     data = {'params':{'html_params':{'questionType':testType,'difficulty':"easy"},
    #                       'db_initialize':""},
    #             'correct_answers':{'SQLEditor': initialAns}}
        
    #     self.assertEqual(len(data['correct_answers']['SQLEditor']),len(initialAns))
        
    #     autogenerate(data)
        
    #     self.assertGreater(len(data['correct_answers']['SQLEditor']),len(initialAns))
    #     actualQuestionType = ''.join(data['params']['questionString'])
    #     self.assertIn("select",actualQuestionType)

if __name__ == '__main__':
    unittest.main()